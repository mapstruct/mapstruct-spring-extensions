[[mapperAsConverter]]
== Mappers as Converters

MapStruct Mappers nicely match Spring's https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#core-convert-Converter-API[Converter] idea:

====
[source,java,linenums]
[subs="verbatim,attributes"]
----
@Mapper(componentModel = "spring")
public interface CarMapper extends Converter<Car, CarDto> {
    @Mapping(target = "seats", source = "seatConfiguration")
    CarDto convert(Car car);
}
----
====

This allows using the Mapper indirectly via the `ConversionService`:

====
[source,java,linenums]
[subs="verbatim,attributes"]
----
...
    @Autowired
    private ConversionService conversionService;
...
    Car car = ...;
    CarDto carDto = conversionService.convert(car, CarDto.class);
----
====

All this can be achieved already with MapStruct's core functionality.
However, when a Mapper wants to https://mapstruct.org/documentation/stable/reference/html/#invoking-other-mappers[invoke] another one, it can't take the route via the `ConversionService`, because the latter's `convert` method does not match the signature that MapStruct expects for a mapping method.
Thus, the developer still has to add every invoked Mapper to the invoking Mapper's `uses` element.
This creates (aside from a potentially long list) a tight coupling between Mappers that the `ConversionService` is designed to avoid.

This is where MapStruct Spring Extensions can help.
Including the two artifacts in your build will generate an Adapter class that _can_ be used by an invoking Mapper.
Let's say that the above CarMapper is accompanied by a SeatConfigurationMapper:

====
[source,java,linenums]
[subs="verbatim,attributes"]
----
@Mapper
public interface SeatConfigurationMapper extends Converter<SeatConfiguration, SeatConfigurationDto> {
    @Mapping(target = "seatCount", source = "numberOfSeats")
    @Mapping(target = "material", source = "seatMaterial")
    SeatConfigurationDto convert(SeatConfiguration seatConfiguration);
}
----
====

The generated Adapter class will look like this:

====
[source,java,linenums]
[subs="verbatim,attributes"]
----
@Component
public class ConversionServiceAdapter {
  private final ConversionService conversionService;

  public ConversionServiceAdapter(@Lazy final ConversionService conversionService) {
    this.conversionService = conversionService;
  }

  public CarDto mapCarToCarDto(final Car source) {
    return (CarDto) conversionService.convert(source, TypeDescriptor.valueOf(Car.class), TypeDescriptor.valueOf(CarDto.class));
  }

  public SeatConfigurationDto mapSeatConfigurationToSeatConfigurationDto(
      final SeatConfiguration source) {
    return (SeatConfigurationDto) conversionService.convert(source, TypeDescriptor.valueOf(SeatConfiguration.class), TypeDescriptor.valueOf(SeatConfigurationDto.class));
  }
}
----
====

Since this class' methods match the signature that MapStruct expects, we can now add it to the CarMapper:

====
[source,java,linenums]
[subs="verbatim,attributes"]
----
@Mapper(uses = ConversionServiceAdapter.class)
public interface CarMapper extends Converter<Car, CarDto> {
    @Mapping(target = "seats", source = "seatConfiguration")
    CarDto convert(Car car);
}
----
====

[[mappersAsConvertersCustomNames]]
=== Custom Names

By default, the generated class will be located in the package `org.mapstruct.extensions.spring.converter` and receive the name `ConversionServiceAdapter`.
Typically, you will want to change these names, most often at least the package.
This can be accomplished by adding the `SpringMapperConfig` annotation on any class within your regular source code.
One natural candidate would be your https://mapstruct.org/documentation/stable/reference/html/#shared-configurations[shared configuration] if you use this:

====
[source,java,linenums]
[subs="verbatim,attributes"]
----
import org.mapstruct.MapperConfig;
import org.mapstruct.extensions.spring.SpringMapperConfig;
import org.mapstruct.extensions.spring.example.adapter.MyAdapter;

@MapperConfig(componentModel = "spring", uses = MyAdapter.class)
@SpringMapperConfig(conversionServiceAdapterPackage ="org.mapstruct.extensions.spring.example.adapter", conversionServiceAdapterClassName ="MyAdapter")
public interface MapperSpringConfig {
}
----

Note: If you do _not_ specify the `conversionServiceAdapterPackage` element, the generated Adapter class will reside in the same package as the annotated Config.
====

[[customConversionService]]
=== Specifying The Conversion Service Bean Name

If your application has multiple `ConversionService` beans, you will need to specify the bean name.
The `SpringMapperConfig` allows you to specify it using the `conversionServiceBeanName` property.

====
[source,java,linenums]
[subs="verbatim,attributes"]
----
import org.mapstruct.MapperConfig;
import org.mapstruct.extensions.spring.SpringMapperConfig;

@MapperConfig(componentModel = "spring", uses = ConversionServiceAdapter.class)
@SpringMapperConfig(conversionServiceBeanName = "myConversionService")
public interface MapperSpringConfig {
}
----
====

[[generateConverterScan]]
==== Modified ConverterScan

When the `conversionServiceBeanName` property is set, the built-in <<converterScan>> cannot be used in tests as it does not pick up this property.
However, setting the property `generateConverterScan` to `true` will create an alternative inside the project.
Important to note: This version will _not_ create a `ConversionService` with the given bean name, but merely register all Mappers with the bean identified by the given name.
This leads to two practical differences:

- Unlike its <<testExtensions>> counterpart, this version is perfectly suited to be used in production code.
- In a test, the developer will still have to provide a `ConfigurableConversionService` themselves, e.g.:

====
[source,java,linenums]
[subs="verbatim,attributes"]
----
@ExtendWith(SpringExtension.class)
public class ConversionServiceAdapterIntegrationTest {
  @Configuration
  @ConverterScan
  static class AdditionalBeanConfiguration {
    @Bean
    ConfigurableConversionService myConversionService() {
      return new DefaultConversionService();
    }
  }

  @Autowired
  @Qualifier("myConversionService")
  private ConversionService conversionService;
}
----
====

[[adapterMethodName]]
=== Modifying the name for the generated adapter method

By default, the adapter class will contain method names of the form `map<SourceTypeName>To<targetTypeName>`.
If you wish to change this, you can do so on a per-Mapper basis by applying the annotation `@AdapterMethodName`:

====
[source,java,linenums]
[subs="verbatim,attributes"]
----
@Mapper(config = MapperSpringConfig.class)
@AdapterMethodName("toDto")
public interface WheelMapper extends Converter<Wheel, WheelDto> {
    @Override
    WheelDto convert(Wheel source);
}
----
====

This changes the generated method name to be the annotation's `value` attribute:

====
[source,java,linenums]
[subs="verbatim,attributes"]
----
@Component
public class ConversionServiceAdapter {
private final ConversionService conversionService;

  public ConversionServiceAdapter(@Lazy final ConversionService conversionService) {
    this.conversionService = conversionService;
  }

  public WheelDto toDto(final Wheel source) {
    return (WheelDto) conversionService.convert(source, TypeDescriptor.valueOf(Wheel.class), TypeDescriptor.valueOf(WheelDto.class));
  }
}
----
====
